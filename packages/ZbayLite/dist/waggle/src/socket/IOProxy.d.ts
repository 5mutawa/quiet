import SocketIO from 'socket.io';
import CommunitiesManager from '../communities/manager';
import { ConnectionsManager } from '../libp2p/connectionsManager';
import { Storage } from '../storage';
import { AskForMessagesPayload, ChannelMessage, IncomingMessages, InitCommunityPayload, LaunchRegistrarPayload, RegisterOwnerCertificatePayload, RegisterUserCertificatePayload, SaveOwnerCertificatePayload, SubscribeToTopicPayload, ChannelMessagesIdsResponse, CreatedChannelResponse, FetchAllMessagesResponse, GetPublicChannelsResponse, SendCertificatesResponse } from '@zbayapp/nectar';
export default class IOProxy {
    io: SocketIO.Server;
    connectionsManager: ConnectionsManager;
    communities: CommunitiesManager;
    constructor(connectionsManager: ConnectionsManager);
    getStorage(peerId: string): Storage;
    closeAll(): Promise<void>;
    subscribeToTopic: (payload: SubscribeToTopicPayload) => Promise<void>;
    askForMessages: (payload: AskForMessagesPayload) => Promise<void>;
    sendMessage: (peerId: string, message: ChannelMessage) => Promise<void>;
    initializeConversation: (peerId: string, address: string, encryptedPhrase: string) => Promise<void>;
    getPrivateConversations: (peerId: string) => Promise<void>;
    sendDirectMessage: (peerId: string, channelAddress: string, messagePayload: string) => Promise<void>;
    subscribeToDirectMessageThread: (peerId: string, address: string) => Promise<void>;
    subscribeToAllConversations: (peerId: string, conversations: string[]) => Promise<void>;
    loadCertificates: (payload: SendCertificatesResponse) => void;
    loadPublicChannels: (payload: GetPublicChannelsResponse) => void;
    loadAllMessages: (payload: FetchAllMessagesResponse) => void;
    loadMessages: (payload: IncomingMessages) => void;
    sendMessagesIds: (payload: ChannelMessagesIdsResponse) => void;
    createdChannel: (payload: CreatedChannelResponse) => void;
    loadAllDirectMessages: (messages: string[], channelAddress: string) => void;
    loadAllPrivateConversations: (payload: any) => void;
    registerOwnerCertificate: (payload: RegisterOwnerCertificatePayload) => Promise<void>;
    saveOwnerCertificate: (payload: SaveOwnerCertificatePayload) => Promise<void>;
    registerUserCertificate: (payload: RegisterUserCertificatePayload) => Promise<void>;
    createNetwork(communityId: string): Promise<void>;
    createCommunity(payload: InitCommunityPayload): Promise<void>;
    launchCommunity(payload: InitCommunityPayload): Promise<void>;
    launchRegistrar(payload: LaunchRegistrarPayload): Promise<void>;
}
